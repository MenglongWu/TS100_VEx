
/*! \page commit-20xx-xx-xx brief
	intruction
	\code {.cpp}
	add code
	\endcode
*/

/*! \page Fix-VEx1-4-1-bate20160130-1 Fix-VEx1-4-0-bate20160130-1: 
	解决LCD蓝屏问题

	- \subpage Bug-VEx1-4-0-bate20160126-1

	问题原因是栈溢出，如下是验证过程

	startup_stm32f10x_hd.s里对栈、堆设置大小分别是1K、512B
	\code {.cpp}
	Stack_Size      EQU     0x00000400
	Heap_Size       EQU     0x00000200
	\endcode

	原始代码优化级别是-O3，BUG出现概率不好把握。

	将它改成-O0，运行直接出错

	在将栈大小修改得很大（只要不超过STM32F10x系列64KB）
	\code {.cpp}
	Stack_Size      EQU     0x00004000
	\endcode
	再次以-O0无优化运行，程序正常通过。

	原因在于函数调用层太多，并且当初为了调试，各函数内几乎都有char strout[256]，每次函数调用至少消耗256byte栈，1K的栈很快用完。

	改成-O3选项，将各函数内部的char strout[256];改成volatile char strout[256];运行程序崩溃，所以可以确定问题根源在栈溢出。

	之所以-O3优化未必溢出的原因可能在于中断，如果没有中断应该不会崩溃，或许编译器会检测到“可预见的函数调用消耗的栈”，但它不能预测“中断”，当栈紧张时，再来一个中断，并且中断有过多的函数调用或内部变量消耗栈就会导致崩溃。最终进入HardFault_Handler中断


	测试时发现一个问题，为了测试stm32的栈，我写了一个无限递归调用，居然没把系统弄崩溃，反汇编看到代码不是用BL等跳转入栈指令，而是用B指令。

	BL 跳转前在LR寄存器保存PC值，需要栈
	B 跳转是PC的相对地址，由于编译器计算得出，所以不需要栈

	原始代码
	\code {.cpp}
	volatile void s2()
	{
		volatile int i;
		if (g_delay_ms < 200) {
			s();
		}
	}
	volatile void s()
	{
		volatile int i;
		if (g_delay_ms < 200) {
			
			s2();
		}
	}
	main()
	{
		s();
0x08009860 F000FD94  BL.W     s (0x0800A38C) @0x08000160
	}
	\endcode
	
	-O0无优化内容
	\code {.cpp}
	  2570: { 
	  2571:         volatile int i; 
	0x0800A38C B510      PUSH     {r4,lr}
	  2572:         if (g_delay_ms < 200) { 
	  2573:                  
	0x0800A38E 4803      LDR      r0,[pc,#12]  ; @0x0800A39C
	0x0800A390 8800      LDRH     r0,[r0,#0x00]
	0x0800A392 28C8      CMP      r0,#0xC8
	0x0800A394 DA01      BGE      0x0800A39A
	  2574:                 s2(); 
	  2575:         } 
	0x0800A396 F000F803  BL.W     s2 (0x0800A3A0)
	  2576: } 
	0x0800A39A BD10      POP      {r4,pc}
	0x0800A39C 10B8      DCW      0x10B8
	0x0800A39E 2000      DCW      0x2000
	  2563: { 
	  2564:         volatile int i; 
	0x0800A3A0 B510      PUSH     {r4,lr}
	  2565:         if (g_delay_ms < 200) { 
	0x0800A3A2 4803      LDR      r0,[pc,#12]  ; @0x0800A3B0
	0x0800A3A4 8800      LDRH     r0,[r0,#0x00]
	0x0800A3A6 28C8      CMP      r0,#0xC8
	0x0800A3A8 DA01      BGE      0x0800A3AE
	  2566:                 s(); 
	  2567:         } 
	0x0800A3AA F7FFFFEF  BL.W     s (0x0800A38C)
	  2568: } 
	0x0800A3AE BD10      POP      {r4,pc}
	0x0800A3B0 10B8      DCW      0x10B8
	0x0800A3B2 2000      DCW      0x2000
	main()
	{
		s();
0x08009860 F000FD94  BL.W     s (0x0800A38C) @0x08000160
	}
	\endcode
	
	-O0无优化内容，两个函数成了一个整体，
	\code {.cpp}
	  2572:         if (g_delay_ms < 200) { 
	  2573:                  
	0x08008AC4 4803      LDR      r0,[pc,#12]  ; @0x08008AD4
	0x08008AC6 8800      LDRH     r0,[r0,#0x00]
	0x08008AC8 28C8      CMP      r0,#0xC8
	0x08008ACA D201      BCS      0x08008AD0
	  2574:                 s2(); 
	  2575:         } 
	0x08008ACC F000B804  B.W      s2 (0x08008AD8)
	  2576: } 
	0x08008AD0 4770      BX       lr
	0x08008AD2 0000      DCW      0x0000
	0x08008AD4 10BA      DCW      0x10BA
	0x08008AD6 2000      DCW      0x2000
	  2565:         if (g_delay_ms < 200) { 
	0x08008AD8 4803      LDR      r0,[pc,#12]  ; @0x08008AE8
	0x08008ADA 8800      LDRH     r0,[r0,#0x00]
	0x08008ADC 28C8      CMP      r0,#0xC8
	0x08008ADE D201      BCS      0x08008AE4
	  2566:                 s(); 
	  2567:         } 
	0x08008AE0 F7FFBFF0  B.W      s (0x08008AC4)


	main()
	{
		s();
0x08009860 F000FD94  BL.W     s (0x0800A38C) @0x08000160
	}
	\endcode
	解决方法：

	将strout改成全局变量，在堆上分配内存，以-O0无优化运行正常通过。

*/
/*! \page Fix-VEx1-4-1-bate20160126-2 Fix-VEx1-4-0-bate20160126-2: 
	加入调试信息，添加调试界面定位LCD蓝屏问题，后期待测试

	断电定位到CheckLCD函数，向SSD1963操作LCD_SetPoint、LCD_GetPoint时导致程序崩溃。
	暂时将其注释掉。

	加入启动信息输出后又定位到lc_CheckLicence位置也会导致程序崩溃

	同时修改SSD1963自检代码Check1963，将原来的读取 CMD_RD_MEMSTART 寄存器的值改成读取 CMD_GET_GPIO_CONF 寄存器，CMD_RD_MEMSTART 的值属于经验值，换一套程序该值就变了，该方法是SSD1963自检第1套方法，后来忘记删掉

	SSD1963三套检测方法
	- 经验值读取CMD_RD_MEMSTART（废除）
	- 读写GPIO CMD_GET_GPIO_CONF，相关函数SSD1963_SetCheckFlag、SSD1963_IsRestart，该方法未必适用于其他电路板，TS100是将SSD1963的4个GPIO不用的，倘若作为其他用处，SSD1963_SetCheckFlag、SSD1963_IsRestart读写的值CHECK_LCD_VAL根据电路板调试而修改，保证写入该值不引起LCD闪烁
	- 向LCD某点写入值然后读出。该方法只能用于启动初期，不应该用于运行过程，否者某点会闪烁。即使用在运行也可以，选取一个边缘点如(0,0),(1,1)，首先读取该点的色彩，然后写入与该色彩相差无几的，再次读出，如果读出值与写入值相同则表示启动正常，最后恢复原始色彩
*/
/*! \page Bug-VEx1-4-1-bate20160126-1 Bug-VEx1-4-0-bate20160126-1: 
	设备被锁死

	该现象不便于排查

	一台已经注册无效的设备，再次注册后一切正常。
	adjust界面
	     255 384
	1310 255 384
	23   255 384
	1550 255 384

	produce界面
	sn 5410100010006
	laser    logo
	650  on  addr 0 
	1310 on  color 3
	23 off   high 3
	1550 on  width 3
	
	启用这些配置一切正常。

	但重启后再次设置color的值，先设置成0，保存，重启。能重启
	color的值设置成1，保存，重启，界面停留在蓝色界面。
	此时芯片已经锁死，无法再下载程序，无法调试。

	用另一块stm32做相同的动作（关闭芯片锁死代码）暂时无法复现

	线索：color之前是3，设置color时候按esc，居然也能把设置成0值，在其他芯片上没有这个现象

	问题大概定位到lcd启动自动检测上(Check1963)
*/
/*! \page Fix-VEx1-4-1-20151211-1 Bug-VEx1-4-0-20151211-1: 
	解决开机后-10dbm功率计上显示跳动问题，在V1.3.3版本说明有记录此疑似BUG

	现象：
	TS100先启动、TP100后启动。TS100启动后机器默认-10dBm，TP100显示的功率跳动（-11dBm~-13dBm，跳动厉害），切换TS100为-9dBm再切回-10dBm，TP100显示功率正常。

	原因解释：
	TS100输出光功率恰好是TP100档位切换临界值，功率计的档位是以10dBm为单位分档，-10dBm附近就是档位切换位置，所以看到功率不稳定现象。
	
	复现：
	进入调试后台，以0.1dbm为单位在-10dbm附近缓慢切换光功率，可看到光功率计功率跳动

*/
/*! \page Bug-VEx1-4-0-20151209-1 Bug-VEx1-4-0-20151209-1-N : 
首次切换激光器，功率值变成0dbm
问题出现在快速校准算法的开关使能上，该现象需要继续观察（忘记当初算法实现的裸机），暂时解决了

*/
/*! \page Bug-VEx1-4-0-20151012-1 Bug-VEx1-4-0-20151012-1-N : 调试代码最长注册时间仅200天，理论上应该4*200天
	
	计算使用日志算法疏漏，将for循环里的maxdata改成LOG_CACHE / 4

	\code {.cpp}
	diff --git a/USER/APP/stm32_chip.c b/USER/APP/stm32_chip.c
	index a1c6eeb..bd99c4f 100644
	--- a/USER/APP/stm32_chip.c
	+++ b/USER/APP/stm32_chip.c
	@@ -7,9 +7,12 @@
	 #ifndef _DEBUG_LICENCE_
	 #define gl_text
	 #endif
	+
	+// 最多能容纳 LOG_CACHE 天记录，除非不 开启无穷 (INFINITUDE) 记录，
	+// 此时 Flash 读出的注册日期为 INFINITUDE
	 #define LOG_CACHE (4*200)
	 
	-#define DATE_PER_MONTH (9)
	+#define DATE_PER_MONTH (31)
	 struct pro_licence
	 {
	 	char key[4];					// 公钥
	@@ -334,15 +337,15 @@ int UseTick(int bwrite)
	 	// 	return 3;
	 	// }
	 	// 在Log里遍历注册日期前的日子
	-	if (LOG_CACHE / 4 < uselog.date) {
	-		maxdata = LOG_CACHE / 4;
	+	if (LOG_CACHE  < uselog.date) {
	+		maxdata = LOG_CACHE ;
	 	}
	 	else {
	 		maxdata = uselog.date;
	 	}
	 	// return uselog.date;
	 
	-	for (i = 0; i < maxdata; i++) {
	+	for (i = 0; i < LOG_CACHE / 4; i++) {
	 		switch(*plog) {
	 		case 0xFFFFFFFF:
	 			*plog = 0xffffff00;
	\endcode
*/


/*! \page Bug-VEx1-4-0-20151011-4 Bug-VEx1-4-0-20151011-4-N : 伪随机数为0，芯片ID最后一位为0
	在LICENCE Dialog前关闭AD输入信号，由于采用AD值作为随机数，当关闭AD输入信号后AD值全为0，所以导致芯片ID最后一位为0。

	解决措施
	UI_LicenceDlg 里调用的lc_CheckLicence不产生随机数，而是在之前调用 lc_CheckLicence 参数随机数，同时 Ctrl_Wavelength 关闭光功率。这样就能正确使用ADC
	\code {.cpp}
	diff --git a/USER/APP/main.c b/USER/APP/main.c
	index 0ad57fe..ee50a6d 100644
	--- a/USER/APP/main.c
	+++ b/USER/APP/main.c
	@@ -2508,9 +2512,16 @@ int main(void)
	 	printf("Draw UI\n");
	 
	 	// lc_CheckLicence(lic);
	-	UI_LicenceDlg();
	-	
	+	//Ctrl_Wavelength(WL_OFF);
	+	// 已经注册
	+	if ( !lc_IsLicence()) {
	+		lc_CheckLicence(lic);
	+		Ctrl_Wavelength(WL_OFF);
	+		UI_LicenceDlg();	
	+	}
	+	lc_CheckLicence(lic);	
	 	LCD_DrawMain();
	+
	\endcode
*/


/*! \page Bug-VEx1-4-0-20151011-3 Bug-VEx1-4-0-20151011-3-C : 未注册显示剩余时间不为0
	正常情况下为注册应该显示剩余使用次数为0，在UseTick为对设备是否注册检查，
	只有成功注册的设备才有计算使用次数的必要

	\code {.cpp}
	diff --git a/USER/APP/stm32_chip.c b/USER/APP/stm32_chip.c
	index eae992c..5df1967 100644
	--- a/USER/APP/stm32_chip.c
	+++ b/USER/APP/stm32_chip.c
	@@ -125,12 +125,28 @@ void lc_CheckMonth(unsigned long *month)
	 	}
	 }
	 
	+int IsLicence()
	+{
	+	struct pro_licence uselog;
	+	unsigned long licence_true[4];
	+
	+	ReadProLicence(&uselog);
	+	// 已经注册
	+	if (licence_true[3] == uselog.licence[3]) {
	+		return 1;
	+	}
	+	else  {
	+		return 0;
	+	}
	+}
	@@ -250,6 +270,9 @@ int UseTick(int bwrite)
	 	int maxdata;
	 
	 	
	+	if ( 0 == IsLicence() ) {
	+		return 0;
	+	}
	\endcode	
*/






/*! \page Bug-VEx1-4-0-20151011-2 Bug-VEx1-4-0-20151011-2-C: 已经注册的设备反复注册，延长使用期限

	注册成功后剩余使用次数正确倒计时，但在倒计时未结束前再次使用相同的注册码注册依旧能注册成功，并且倒计时复位。
	应该限定“只有未注册的设备才能注册”

	\code {.cpp}
	diff --git a/USER/APP/stm32_chip.c b/USER/APP/stm32_chip.c
	index a447579..5df1967 100644
	--- a/USER/APP/stm32_chip.c
	+++ b/USER/APP/stm32_chip.c
	@@ -141,11 +157,15 @@ int lc_InputLicence(unsigned long *licence, unsigned long *month)
	 	unsigned long licence_true[4];
	 	char strout[111];
	 	int i;
	-	calc_licence(licence_true, (*month) * DATE_PER_MONTH);
	 
	-	// sprintf(strout,"%8.8u %8.8u %8.8u %8.8u \n", 
	-	// 	licence_true[0],licence_true[1],licence_true[2],licence_true[3]);
	-	// gl_text(0,100,strout, -1);
	+
	+	// 已经注册
	+	if (IsLicence() ) {
	+		return 2;
	+	}
	+
	+	// 未注册
	+	calc_licence(licence_true, (*month) * DATE_PER_MONTH);
	 	if (licence_true[3] == licence[0]) {
	 		ReadProLicence(&uselog);
	 		uselog.licence[0] = licence_true[0];
	@@ -157,10 +177,10 @@ int lc_InputLicence(unsigned long *licence, unsigned long *month)
	 			uselog.log[i] = -1;
	 		}
	 		WriteProLicence(&uselog);
	-		return 1;
	+		return 0;
	 	}
	 	else {
	-		return 0;
	+		return 1;
	 	}
	 }
	\endcode	
/*





/*! \page Bug-VEx1-4-0-20151011-1 Bug-VEx1-4-0-20151011-1-N : 已经注册 1 * 9周期 的使用期限，改成 1 * N周期(N<>9)后变成未注册
测试代码里将每月设置为9天，注册后每次开机成功计算剩余使用次数。在不擦除LICENCE Flash 页面情况下修改每月天数为15天再次测试，开机后显示注册码失效，不再对使用次数倒计时
	
	\code {.cpp}
	diff --git a/USER/APP/stm32_chip.c b/USER/APP/stm32_chip.c
	index eae992c..a447579 100644
	--- a/USER/APP/stm32_chip.c
	+++ b/USER/APP/stm32_chip.c
	@@ -141,7 +141,7 @@ int lc_InputLicence(unsigned long *licence, unsigned long *month)
	 	unsigned long licence_true[4];
	 	char strout[111];
	 	int i;
	-	calc_licence(licence_true, *month);
	+	calc_licence(licence_true, (*month) * DATE_PER_MONTH);
	@@ -465,7 +460,7 @@ int lc_CheckLicence(unsigned long licence2[4])
	 	}
	 	// 有licence则首先计算正确的licence
	 	else {
	-		calc_licence(licence_true, uselog.date / DATE_PER_MONTH );	
	+		calc_licence(licence_true, uselog.date); //  / DATE_PER_MONTH );	
	\endcode	
*/

